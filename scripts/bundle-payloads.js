const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process'); // To run external obfuscators

// --- USER CONFIGURATION ---
// Define the paths to your source code and the final output library.
const PAYLOADS_SRC_DIR = path.join(__dirname, '..', 'payloads_src');
const OUTPUT_FILE_PATH = path.join(__dirname, '..', 'api', '_lib', 'payloads.js');
const OBFUSCATOR_CLI_COMMAND = 'java -jar IronBrew2.jar'; // Example for IronBrew2

// --- SCRIPT LOGIC ---

console.log("Starting payload bundling process...");

/**
 * A placeholder function for applying obfuscation.
 * YOU WILL MODIFY THIS to integrate your chosen obfuscator.
 * @param {string} inputFilePath - The path to the human-readable Lua file.
 * @returns {string} - The obfuscated Lua code as a string.
 */
function obfuscateFile(inputFilePath) {
  console.log(`   -> Obfuscating: ${path.basename(inputFilePath)}...`);
  
  // This is an EXAMPLE using a command-line obfuscator.
  // It saves the output to a temporary file, reads it, then deletes it.
  const tempOutputPath = path.join(__dirname, 'temp_obfuscated.lua');
  const command = `${OBFUSCATOR_CLI_COMMAND} -in "${inputFilePath}" -out "${tempOutputPath}"`;

  try {
    execSync(command, { stdio: 'inherit' }); // stdio:'inherit' will show obfuscator output
    const obfuscatedCode = fs.readFileSync(tempOutputPath, 'utf8');
    fs.unlinkSync(tempOutputPath); // Clean up the temporary file
    return obfuscatedCode;
  } catch (error) {
    console.error(`ERROR: Failed to obfuscate ${inputFilePath}.`);
    console.error(error);
    // If obfuscation fails, we must stop the build process.
    process.exit(1);
  }
}

function main() {
  if (!fs.existsSync(PAYLOADS_SRC_DIR)) {
    console.error(`ERROR: Source directory not found at ${PAYLOADS_SRC_DIR}`);
    return;
  }

  const payloadFiles = fs.readdirSync(PAYLOADS_SRC_DIR).filter(file => file.endsWith('.lua'));
  const payloads = {};

  for (const file of payloadFiles) {
    const scriptId = path.basename(file, '.lua'); // e.g., 'game_a_script.lua' -> 'game_a_script'
    const filePath = path.join(PAYLOADS_SRC_DIR, file);
    
    // Obfuscate the file content.
    const obfuscatedContent = obfuscateFile(filePath);
    
    // Store the result in our map.
    payloads[scriptId] = obfuscatedContent;
  }

  // Generate the final JavaScript module content.
  const fileContent = `
// WARNING: THIS FILE IS AUTO-GENERATED BY 'npm run build:payloads'. DO NOT EDIT MANUALLY.
// All human-readable source code should be in the '/payloads_src/' directory.

const payloads = {
${Object.entries(payloads).map(([id, code]) => `  "${id}": \`${code.replace(/`/g, '\\`')}\``).join(',\n')}
};

/**
 * Retrieves a payload by its unique script ID.
 * @param {string} scriptId The ID of the script to retrieve.
 * @returns {string|null} The payload string or null if not found.
 */
function getPayload(scriptId) {
  return payloads[scriptId] || null;
}

module.exports = { getPayload };
`;

  // Write the generated content to the output file.
  fs.writeFileSync(OUTPUT_FILE_PATH, fileContent.trim());
  console.log(`\nâœ… Successfully bundled ${Object.keys(payloads).length} payloads.`);
  console.log(`   -> Output written to: ${OUTPUT_FILE_PATH}`);
}

main();